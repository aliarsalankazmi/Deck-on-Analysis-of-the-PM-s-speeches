facesInfo
eventsDf <- at_depth(eventsInfo, 2, unlist) %>%
map(.f = compact) %>%
at_depth(2, .f = as.matrix) %>%
at_depth(2, .f = t) %>%
at_depth(2, .f = data.frame) %>%
map(.f = rbindlist, fill = TRUE)
map_int(eventsDf, nrow)
map_int(eventsDf, ncol)
rm(res3)
pkgs <- c("httr", "purrr", "dplyr", "data.table", "jsonlite", "ggplot2", "scales", "ggthemes", "extrafont")
loadedPkgs <- sapply(pkgs, require, character.only = TRUE)
vidLocalDir <- "C:\\Users\\kazami\\Desktop\\Aimia\\Campaign Analytics + BI + Self-learning\\Personal Projects\\Video Emotion Analyses\\Nawaz Sharif"
graphLocalDir <- "C:\\Users\\kazami\\Desktop\\Aimia\\Campaign Analytics + BI + Self-learning\\Personal Projects\\Video Emotion Analyses\\Graphs"
emotionApi <- "https://api.projectoxford.ai/emotion/v1.0/recognizeinvideo"
emotApiKey <- "b47c50059f324f8c805d04f657bec86d"
emotApiParam <- "perFrame"
######### Specifying Video URLs
vid1Url <- "https://github.com/aliarsalankazmi/Facereading-with-MS-Emotion-API/blob/master/Data/Meeting%20Sec%20Issues.mp4?raw=true"
vid2Url <- "https://github.com/aliarsalankazmi/Facereading-with-MS-Emotion-API/blob/master/Data/Prime%20Minister%20Mian%20Nawaz%20Shareef%20Address%20to%20Nation,%2019th%20August%202013.mp4?raw=true"
vid3Url <- "https://github.com/aliarsalankazmi/Facereading-with-MS-Emotion-API/blob/master/Data/Off%20The%20Record%203rd%20November%202016.mp4"
postBody = list(url = vid3Url)
req3 <- POST(url = emotionApi, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), body = postBody,
query = list(outputStyle = "perFrame"), encode = "json", verbose())
if(status_code(req3) != 202){
message("Some problem in sending the request...")
Sys.sleep(30)
}
opLoc3 <- headers(req3)[["operation-location"]]				# Wait some time until processing completes
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
content(res3)$status
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$status
content(res3)
vid3Url <- "https://github.com/aliarsalankazmi/Facereading-with-MS-Emotion-API/blob/master/Data/Power%20Play%204th%20November%202016.mp4?raw=true"
postBody = list(url = vid3Url)
req3 <- POST(url = emotionApi, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), body = postBody,
query = list(outputStyle = "perFrame"), encode = "json", verbose())
if(status_code(req3) != 202){
message("Some problem in sending the request...")
Sys.sleep(30)
}
opLoc3 <- headers(req3)[["operation-location"]]				# Wait some time until processing completes
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
content(res3)
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$status
content(res3)$progress
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
content(res3)
vid3Url
vid4Url <- "https://github.com/aliarsalankazmi/Facereading-with-MS-Emotion-API/blob/master/Data/Off%20The%20Record%203rd%20November%202016.mp4?raw=true"
postBody = list(url = vid4Url)
req4 <- POST(url = emotionApi, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), body = postBody,
query = list(outputStyle = "perFrame"), encode = "json", verbose())
if(status_code(req4) != 202){
message("Some problem in sending the request...")
Sys.sleep(30)
}
opLoc4 <- headers(req4)[["operation-location"]]				# Wait some time until processing completes
res4 <- GET(url = opLoc4, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res4)
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)
vid4Url <- "https://github.com/aliarsalankazmi/Facereading-with-MS-Emotion-API/blob/master/Data/Off%20The%20Record%203rd%20November%202016.mp4?raw=true"
postBody = list(url = vid4Url)
req4 <- POST(url = emotionApi, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), body = postBody,
query = list(outputStyle = "perFrame"), encode = "json", verbose())
if(status_code(req4) != 202){
message("Some problem in sending the request...")
Sys.sleep(30)
}
opLoc4 <- headers(req4)[["operation-location"]]				# Wait some time until processing completes
res4 <- GET(url = opLoc4, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res4)
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
content(res3)$status
startInfo <- extractListElement(jsonObject = res3, element = "start")
durationInfo <- extractListElement(jsonObject = res3, element = "duration")
intervalInfo <- extractListElement(jsonObject = res3, element = "interval")
timescaleInfo <- extractListElement(jsonObject = res3, element = "timescale")
eventsInfo <- extractListElement(jsonObject = res3, element = "events")
facesInfo <- extractListElement(jsonObject = res3, element = "faceId")
extractListElement <- function(jsonObject, element){
listElement <- content(jsonObject)$processingResult %>%
jsonlite::fromJSON(.) %>%
purrr::flatten(.) %>%
at_depth(0, element)
}
startInfo <- extractListElement(jsonObject = res3, element = "start")
durationInfo <- extractListElement(jsonObject = res3, element = "duration")
intervalInfo <- extractListElement(jsonObject = res3, element = "interval")
timescaleInfo <- extractListElement(jsonObject = res3, element = "timescale")
eventsInfo <- extractListElement(jsonObject = res3, element = "events")
facesInfo <- extractListElement(jsonObject = res3, element = "faceId")
facesInfo
at_depth(eventsInfo, 2, unlist) %>%
map(.f = compact) %>%
at_depth(2, .f = as.matrix) %>%
at_depth(2, .f = t) %>%
at_depth(2, .f = data.frame) %>%
map(.f = rbindlist, fill = TRUE) %>% map_int(ncol)
rm(res3)
gc(T,T)
res4 <- GET(url = opLoc4, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res4)$progress
content(res4)$status
facesInfo <- extractListElement(jsonObject = res4, element = "faceId")
facesInfo
eventsInfo <- extractListElement(jsonObject = res4, element = "events")
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
startInfo <- extractListElement(jsonObject = res3, element = "start")
durationInfo <- extractListElement(jsonObject = res3, element = "duration")
intervalInfo <- extractListElement(jsonObject = res3, element = "interval")
timescaleInfo <- extractListElement(jsonObject = res3, element = "timescale")
eventsInfo <- extractListElement(jsonObject = res3, element = "events")
facesInfo <- extractListElement(jsonObject = res3, element = "faceId")
facesInfo
eventsDf <- at_depth(eventsInfo, 2, unlist) %>%
map(.f = compact) %>%
at_depth(2, .f = as.matrix) %>%
at_depth(2, .f = t) %>%
at_depth(2, .f = data.frame) %>%
map(.f = rbindlist, fill = TRUE)
rowsPerDf <- map_int(eventsDf, nrow)
map_int(eventsDf, ncol)
eventsDf[79]
eventsDf[78]
eventsDf[78] %>% ncol
eventsDf[[78]] %>% ncol
which(map_int(eventsDf, ncol) == 39)
eventsDf[103]
timescaleInfo
colsPerDf <- map_int(eventsDf, ncol)
colsPerDf
eventsDfNew <- eventsDf[which(colsPerDf == 13)]
rowsPerDf <- map_int(eventsDfNew, nrow)
colsPerDf <- map_int(eventsDfNew, ncol)
colsPerDf
rowsPerDf
startInfoAll <- rep(startInfo, times = rowsPerDf)
durationInfoAll <- rep(durationInfo, times = rowsPerDf)
intervalInfoAll <- rep(intervalInfo, times = rowsPerDf)
all(length(startInfoAll) == length(durationInfoAll), length(durationInfoAll) == length(intervalInfoAll), length(intervalInfoAll) == sum(rowsPerDf))
rowsPerDf
class(rowsPerDf)
startInfo <- extractListElement(jsonObject = res3, element = "start")
durationInfo <- extractListElement(jsonObject = res3, element = "duration")
intervalInfo <- extractListElement(jsonObject = res3, element = "interval")
timescaleInfo <- extractListElement(jsonObject = res3, element = "timescale")
eventsInfo <- extractListElement(jsonObject = res3, element = "events")
facesInfo <- extractListElement(jsonObject = res3, element = "faceId")
eventsDfNew <- eventsDf[which(colsPerDf == 13)]
rowsPerDf <- map_int(eventsDfNew, nrow)
colsPerDf <- map_int(eventsDfNew, ncol)
startInfoAll <- rep(startInfo, times = rowsPerDf)
?rep
length(startInfo)
eventsDf <- at_depth(eventsInfo, 2, unlist) %>%
map(.f = compact) %>%
at_depth(2, .f = as.matrix) %>%
at_depth(2, .f = t) %>%
at_depth(2, .f = data.frame) %>%
map(.f = rbindlist, fill = TRUE)
rowsPerDfOld <- map_int(eventsDf, nrow)
colsPerDfOld <- map_int(eventsDf, ncol)
# Here, I am removing data frames where more than 1 face has been captured, you are recommended not to try this in your tasks
eventsDfNew <- eventsDf[which(colsPerDfOld == 13)]
rowsPerDf <- map_int(eventsDfNew, nrow)
colsPerDf <- map_int(eventsDfNew, ncol)
startInfoAll <- rep(startInfo[which(colsPerDfOld == 13)], times = rowsPerDf)
durationInfoAll <- rep(durationInfo[which(colsPerDfOld == 13)], times = rowsPerDf)
intervalInfoAll <- rep(intervalInfo[which(colsPerDfOld == 13)], times = rowsPerDf)
all(length(startInfoAll) == length(durationInfoAll), length(durationInfoAll) == length(intervalInfoAll), length(intervalInfoAll) == sum(rowsPerDf))
eventsDfAll <- rbindlist(eventsDfNew)
eventsDfAll[, ':='(start = startInfoAll,
duration = durationInfoAll,
interval = intervalInfoAll)]
eventsDfAll
eventsDfAll[,.N, by = id]
pkgs <- c("httr", "purrr", "dplyr", "data.table", "jsonlite", "ggplot2", "scales", "ggthemes", "extrafont")
loadedPkgs <- sapply(pkgs, require, character.only = TRUE)
vidLocalDir <- "C:\\Users\\kazami\\Desktop\\Aimia\\Campaign Analytics + BI + Self-learning\\Personal Projects\\Video Emotion Analyses\\Nawaz Sharif"
graphLocalDir <- "C:\\Users\\kazami\\Desktop\\Aimia\\Campaign Analytics + BI + Self-learning\\Personal Projects\\Video Emotion Analyses\\Graphs"
emotionApi <- "https://api.projectoxford.ai/emotion/v1.0/recognizeinvideo"
emotApiKey <- "b47c50059f324f8c805d04f657bec86d"
emotApiParam <- "perFrame"
extractListElement <- function(jsonObject, element){
listElement <- content(jsonObject)$processingResult %>%
jsonlite::fromJSON(.) %>%
purrr::flatten(.) %>%
at_depth(0, element)
}
######### Specifying Video URLs
vid1Url <- "https://github.com/aliarsalankazmi/Facereading-with-MS-Emotion-API/blob/master/Data/Meeting%20Sec%20Issues.mp4?raw=true"
vid2Url <- "https://github.com/aliarsalankazmi/Facereading-with-MS-Emotion-API/blob/master/Data/Prime%20Minister%20Mian%20Nawaz%20Shareef%20Address%20to%20Nation,%2019th%20August%202013.mp4?raw=true"
vid3Url <- "https://github.com/aliarsalankazmi/Facereading-with-MS-Emotion-API/blob/master/Data/Power%20Play%204th%20November%202016.mp4?raw=true"
postBody = list(url = vid3Url)
req3 <- POST(url = emotionApi, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), body = postBody,
query = list(outputStyle = "perFrame"), encode = "json", verbose())
if(status_code(req3) != 202){
message("Some problem in sending the request...")
Sys.sleep(30)
}
opLoc3 <- headers(req3)[["operation-location"]]				# Wait some time until processing completes
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$status
content(res3)
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$status
content(res3)$progress
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
res3 <- GET(url = opLoc3, add_headers(.headers = c("Ocp-Apim-Subscription-Key" = emotApiKey)), encode = "json", verbose())
content(res3)$progress
startInfo <- extractListElement(jsonObject = res3, element = "start")
durationInfo <- extractListElement(jsonObject = res3, element = "duration")
intervalInfo <- extractListElement(jsonObject = res3, element = "interval")
timescaleInfo <- extractListElement(jsonObject = res3, element = "timescale")
eventsInfo <- extractListElement(jsonObject = res3, element = "events")
facesInfo <- extractListElement(jsonObject = res3, element = "faceId")
eventsDf <- at_depth(eventsInfo, 2, unlist) %>%
map(.f = compact) %>%
at_depth(2, .f = as.matrix) %>%
at_depth(2, .f = t) %>%
at_depth(2, .f = data.frame) %>%
map(.f = rbindlist, fill = TRUE)
rowsPerDfOld <- map_int(eventsDf, nrow)
colsPerDfOld <- map_int(eventsDf, ncol)
# Here, I am removing data frames where more than 1 face has been captured, you are recommended not to try this in your tasks
eventsDfNew <- eventsDf[which(colsPerDfOld == 13)]
rowsPerDf <- map_int(eventsDfNew, nrow)
colsPerDf <- map_int(eventsDfNew, ncol)
startInfoAll <- rep(startInfo[which(colsPerDfOld == 13)], times = rowsPerDf)
durationInfoAll <- rep(durationInfo[which(colsPerDfOld == 13)], times = rowsPerDf)
intervalInfoAll <- rep(intervalInfo[which(colsPerDfOld == 13)], times = rowsPerDf)
all(length(startInfoAll) == length(durationInfoAll), length(durationInfoAll) == length(intervalInfoAll), length(intervalInfoAll) == sum(rowsPerDf))
eventsDfAll <- rbindlist(eventsDfNew)
eventsDfAll[, ':='(start = startInfoAll,
duration = durationInfoAll,
interval = intervalInfoAll)]
eventsDfAll <- rbindlist(eventsDfNew)
eventsDfAll[, ':='(start = startInfoAll,
duration = durationInfoAll,
interval = intervalInfoAll,
person = "Imran Khan")]
eventsDfAll[id != 0, person := "Arshad Sharif"]
eventsDfAll[, rowNumberGrp := 1:.N, by = person]
eventsDfAll[, rowNumber := 1:.N]
eventsDfAll <- melt(eventsDfAll, id.vars = c("rowNumber", "person", "rowNumberGrp", "id", "x", "y", "width", "height", "start", "duration", "interval"),
measure.vars = c("scores.neutral", "scores.happiness", "scores.surprise", "scores.sadness", "scores.anger",
"scores.disgust", "scores.fear", "scores.contempt"), variable.name = "emotion")
eventsDfAll[, emotion := gsub("scores.", "", emotion, fixed = TRUE)]
setorder(eventsDfAll, rowNumber, rowNumberGrp)
eventsDfAll[,.N, by = id]
ggplot(data = eventsDfAll, aes(x = rowNumber, y = value, fill = emotion)) +
geom_bar(stat = "identity", width = 1) +
facet_wrap(~ person, ncol = 1)
ggplot(data = eventsDfAll, aes(x = rowNumber, y = value, fill = emotion)) +
geom_bar(stat = "identity", width = 1) +
facet_wrap(~ person, ncol = 1) +
#scale_y_continuous(labels = percent) +
xlab("————————————  Time Through the Video  ————————————>\n") + ylab("Normalised Emotion Score") +
ggtitle("Emotions detected using MS Emotion API for Meeting between Nawaz & Raheel on Internal and Regional Security Issues\n") +
theme_minimal() +
scale_fill_ptol(name = "Emotion") +
theme(axis.title = element_text(colour = "grey50", size = rel(1.1)), axis.ticks.x = element_blank(),
axis.text.x = element_blank(), plot.title = element_text(family = "Calibri", size = rel(1.9), hjust = 0, colour = "grey30", face = "bold"),
axis.text.y = element_text(family = "Calibri"), strip.text = element_text(family = "Calibri", size = rel(1.6), colour = "grey30", hjust = 0),
legend.position = "bottom", legend.direction = "horizontal", legend.key.size = unit(0.3, "in"), panel.margin = unit(2, "lines"))
rm(list = ls())
gc(T,T0)
gc(T,T)
pkgs <- c("purrr", "data.table", "ggplot2", "dplyr", "tidyr")
sapply(pkgs, require, character.only = TRUE)
pkgs <- c("purrr", "data.table", "ggplot2", "dplyr", "tidyr")
sapply(pkgs, require, character.only = TRUE)
baseDir <- "C:\\Users\\kazami\\Desktop\\Aimia\\PersonalExpenses\\Bank Statement"
graphDir <- paste(baseDir, "Graphs", sep = "/")
collatedDir <- paste(baseDir, "Collated", sep = "/")
dataDir <- paste(baseDir, "Data", sep = "/")
?read.csv
?list.files
dataFiles <- list.files(path = dataDir, full.names = TRUE, pattern = "csv$")
dataFiles
dfIn <- map(dataDir, read.csv)
dfIn <- map(dataFiles, read.csv)
library(readr)
dfIn <- map(dataFiles, read_csv)
warnings()
str(dfIn)
str(dfIn[[1]])
dfIn <- map(dataFiles, fread)
pkgs <- c("purrr", "data.table", "ggplot2", "dplyr", "tidyr")
sapply(pkgs, require, character.only = TRUE)
baseDir <- "C:\\Users\\kazami\\Desktop\\Aimia\\PersonalExpenses\\Bank Statement"
dataDir <- paste(baseDir, "Data", sep = "/")
graphDir <- paste(baseDir, "Graphs", sep = "/")
collatedDir <- paste(baseDir, "Collated", sep = "/")
dataFiles <- list.files(path = dataDir, full.names = TRUE, pattern = "csv$")
dfIn <- map(dataFiles, read_csv)
library(readr)
pkgs <- c("purrr", "data.table", "ggplot2", "dplyr", "tidyr")
sapply(pkgs, require, character.only = TRUE)
baseDir <- "C:\\Users\\kazami\\Desktop\\Aimia\\PersonalExpenses\\Bank Statement"
dataDir <- paste(baseDir, "Data", sep = "/")
graphDir <- paste(baseDir, "Graphs", sep = "/")
collatedDir <- paste(baseDir, "Collated", sep = "/")
dataFiles <- list.files(path = dataDir, full.names = TRUE, pattern = "csv$")
dfIn <- map(dataFiles, read_csv)
map(dfIn, ncol)
map(dfIn, nrows)
map(dfIn, nrow)
dfIn <- map(dataFiles, read_csv) %>%
rbindlist
dfIn
class(dfIn)
dfIn[is.null(x7)]
dfIn[is.null(X7)]
dfIn[is.null('X7')]
dfIn[is.na(X7)]
dfIn[!is.na(X7)]
dfIn[!is.na(X7)] %>% View
dfIn[!is.na(X7), Description := paste(Description, Debit_Amount, sep = " ")]
dfIn[!is.na(X7)] %>% View
dfIn[!is.na(X7), Debit_Amount := Credit_Amount]
dfIn[!is.na(X7), Credit_Amount := Running_Balance]
dfIn[!is.na(X7), Running_Balance := X7]
dfIn[!is.na(X7)] %>% View
164870.3 + 22066
dfIn[, X7 := NULL]
dfIn[!is.na(X7)] %>% View
dfIn %>% View
sapply(dfIn, class)
dfIn[, Debit_Amount := as.numeric(Debit_Amount)]
rm(dfIn)
dfIn <- map(dataFiles, read_csv) %>%
rbindlist
dfIn[!is.na(X7), Description := paste(Description, Debit_Amount, sep = " ")]
dfIn[!is.na(X7), Debit_Amount := Credit_Amount]
dfIn[!is.na(X7), Credit_Amount := Running_Balance]
dfIn[!is.na(X7), Running_Balance := X7]
dfIn[, X7 := NULL]
dfIn %>% View
dfIn[is.na(as.numeric(Debit_Amount))] %>% View
dfIn[, Debit_Amount := as.numeric(gsub(",", "", Debit_Amount, fixed = TRUE))]
dfIn %>% View
setcolnames(dfIn, names(dfIn), tolower(names(dfIn)))
?setcol
?set
?setnames
setnames(dfIn, names(dfIn), tolower(names(dfIn)))
dfIn
dfIn[, txn_date := as.Date(gsub("\\s.+", "", transaction_date), format = "%m/%d/%Y")]
dfIn %>% View
setorder(dfIn, txn_date)
ncol(dfIn)
setcolorder(dfIn, 7, 1:6)
?setcolorder
setcolorder(dfIn, c(7, 1:6))
dfIn %>% View
?melt.data.table
dfIn1 <- melt(dfIn, measure.vars = c("debit_amount", "credit_amount", "running_balance"))
dfIn1 %>% View
dfIn %>% View
library(ggthemes)
ggplot(data = dfIn1, aes(x = variable, y = value, colour = variable, group = variable)) +
geom_line() +
scale_colour_ptol() +
facet_wrap(~variable, ncol = 1) +
theme_minimal()
ggplot(data = dfIn1, aes(x = txn_date, y = value, colour = variable, group = variable)) +
geom_line() +
scale_colour_ptol() +
facet_wrap(~variable, ncol = 1) +
theme_minimal()
?guides
ggplot(data = dfIn1, aes(x = txn_date, y = value, colour = variable, group = variable)) +
geom_line(size = 2) +
scale_colour_ptol() +
facet_wrap(~variable, ncol = 1, scale = "free") +
guides(colour = "none") +
theme_minimal()
ggplot(data = dfIn1, aes(x = txn_date, y = value, colour = variable, group = variable)) +
geom_line(size = 1.2) +
scale_colour_ptol() +
facet_wrap(~variable, ncol = 1, scale = "free") +
guides(colour = "none") +
scale_y_continuous(labels = comma) +
theme_minimal()
library(scales)
ggplot(data = dfIn1, aes(x = txn_date, y = value, colour = variable, group = variable)) +
geom_line(size = 1.2) +
scale_colour_ptol() +
facet_wrap(~variable, ncol = 1, scale = "free") +
guides(colour = "none") +
scale_y_continuous(labels = comma) +
theme_minimal()
dfIn[debit_amount > 15000] %>% View
dfIn[debit_amount > 10000] %>% View
dfIn[credit_amount > 10000] %>% View
dfIn[credit_amount > 20000] %>% View
a1 <- 9900000
a1 - 2970000
(a1 - 2970000)/20
20 * 12
(a1 - 2970000)/240
62351 * 240
pkgs <- c("slidify", "slidifyLibraries")
sapply(pkgs, require, character.only = T)
setwd("C:\\Users\\kazami\\Desktop\\Aimia\\Campaign Analytics + BI + Self-learning\\Personal Projects\\PM Nawaz Speech Authorship\\Deck\\authorialAnalysisDeck")
pkgs <- c("slidify", "slidifyLibraries")
sapply(pkgs, require, character.only = T)
basePath <- "C:\\Users\\kazami\\Desktop\\Aimia\\Campaign Analytics + BI + Self-learning\\Personal Projects\\PM Nawaz Speech Authorship\\Deck"
setwd(basePath)
allFol <- list.dirs()
if(length(allFol) <= 1){ author("authorialAnalysisDeck") }
getwd()
author("authorialAnalysisDeck")
getwd()
setwd("C:\\Users\\kazami\\Desktop\\Aimia\\Campaign Analytics + BI + Self-learning\\Personal Projects\\PM Nawaz Speech Authorship\\Deck\\authorialAnalysisDeck")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
